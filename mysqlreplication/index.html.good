<!doctype html>
<html lang="en">    
<head>
    <meta charset="utf-8">
    <title>Reveal.js 3 Slide Demo</title>
    <link rel="stylesheet" href="css/reveal.min.css">
    <link rel="stylesheet" href="css/theme/default.css" id="theme">    
    <!--Add support for earlier versions of Internet Explorer -->
    <!--[if lt IE 9]>
    <script src="lib/js/html5shiv.js"></script>
    <![endif]-->
</head>
 
<body>
    <!-- Wrap the entire slide show in a div using the "reveal" class. -->
    <div class="reveal">

<div class="slides">
    <section data-background-image="https://s3.amazonaws.com/media-p.slid.es/uploads/mckraken/images/436688/bckgrnd.png" data-id="7df862e05ed906548cf8f2b68f88cbc6" class="">
	<h1>Fixing MySQL Replication</h1>
	<p>(Without all the downtime)</p>
    </section>
    <section data-background-image="https://s3.amazonaws.com/media-p.slid.es/uploads/mckraken/images/436688/bckgrnd.png" data-id="7df862e05ed906548cf8f2b68f88cbc6" class="">
	<h2>MySQL Replication</h2>
	    <ul>
    		<li data-fragment-index="0" class="fragment">Uni-directional - <u>Always</u> from master to slave</li>
    		<li data-fragment-index="1" class="fragment">Asynchronous - Initiated from the slave requesting <br>from the master</li>
	    </ul> 
            <p data-fragment-index="2" class="fragment">
            <img style="width: 713.451px; height: 325.141px; max-height: none; max-width: none;" src="http://scriptingmysql.com/scriptingmysql/mysql_replication_topology_threads.png">
            </p>

    </section>
    <section data-background-image="https://s3.amazonaws.com/media-p.slid.es/uploads/mckraken/images/436688/bckgrnd.png" data-id="7df862e05ed906548cf8f2b68f88cbc6" class="">
    <section>
	<h2>Replication Overview</h2>
	    <ul>
		<li data-fragment-index="0" class="fragment">Each server needs a unique, non-zero server-id<br> number in the replication group.</li>
		<li data-fragment-index="1" class="fragment">Master writes to binlog</li>
		<li data-fragment-index="2" class="fragment">Slave polls master with I/O thread reading binlog<br>and writing relay-log</li>
		<li data-fragment-index="3" class="fragment">Slave SQL thread reads and applies relay-log</li>
	    </ul>
    </section>
    <section>
	<h2>Replication Overview</h2>
		<p>Q: What makes a "Master"?</p>
		<p data-fragment-index="0" class="fragment">A: It writes a binary log.</p>
    </section>
    </section>
    <section data-background-image="https://s3.amazonaws.com/media-p.slid.es/uploads/mckraken/images/436688/bckgrnd.png" data-id="7df862e05ed906548cf8f2b68f88cbc6" class="">
        <h2>Replication Troubleshooting</h2>
            <ul>
                <li data-fragment-index="0" class="fragment">Slave disconnected long enough for master binlog<br>to be deleted</li>
                <li data-fragment-index="1" class="fragment">Slave not "read-only" and writes applied to slave</li>
                <li data-fragment-index="2" class="fragment">Slave in read-only mode, but SUPER user overrides</li>
                <li data-fragment-index="3" class="fragment">Murphy!</li>
                <li data-fragment-index="3" class="fragment">Others?  <a href=mailto:steve.mccracken@rackspace.com>steve.mccracken@rackspace.com</a></li>
            </ul>
    </section>



 <section  data-background-image="https://s3.amazonaws.com/media-p.slid.es/uploads/mckraken/images/436688/bckgrnd.png" data-id="843e170d99a08ec0409901ecca3eda50" class="">
<section>
            <h2>Installing Percona Tools</h2>
</section>
<section>
            <h2>Installing Percona Tools</h2>
<h3>CentOS/RHEL</h3>
<pre><code style="font-size:24px;">yum install \
http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm
yum search percona
yum -y install percona-xtrabackup percona-toolkit </code></pre>
</section>
<section>
            <h2>Installing Percona Tools</h2>
<h3>Debian/Ubuntu</h3>
<pre><code style="font-size:24px;">apt-key adv --keyserver keys.gnupg.net --recv-keys 1C4CBDCDCD2EFD2A

export VERSION="trusty"
export VERSION="precise"

echo "deb http://repo.percona.com/apt $VERSION main" &gt;&gt; \
/etc/apt/sources.list.d/percona.list
echo "deb-src http://repo.percona.com/apt $VERSION main" &gt;&gt; \
/etc/apt/sources.list.d/percona.list

aptitude update
aptitude search percona
aptitude -y install percona-xtrabackup percona-toolkit </code></pre>
</section>
</section>


   <section data-background-image="https://s3.amazonaws.com/media-p.slid.es/uploads/mckraken/images/436688/bckgrnd.png" data-id="7df862e05ed906548cf8f2b68f88cbc6" class="">
<section>
      <h2>Prerequisite: SSH key login</h2>
</section>
<section>
      <h2>Prerequisite: SSH key login</h2>
         <h3>DB-Master</h3>
<pre data-fragment-index="0" class="fragment"><code style="font-size:24px;">
cat ~/.ssh/id_rsa.pub
#
# If it doesn't exist, then use "ssh-keygen".
#</code></pre>
</section>
<section>
      <h2>Prerequisite: SSH key login</h2>
         <h3>DB-Slave</h3>
<pre data-fragment-index="1" class="fragment"><code style="font-size:24px;">
ls -al ~/.ssh
#
# If the directory doesn't exist, an easy way to create it with
# the correct permissions is to use "ssh-keygen".
# Paste the output of the DB-Master id_rsa.pub file in the
# "authorized_keys" file.
#
vi ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
</code></pre>
</section>
   </section>


   <section data-background-image="https://s3.amazonaws.com/media-p.slid.es/uploads/mckraken/images/436688/bckgrnd.png" data-id="7df862e05ed906548cf8f2b68f88cbc6" class="">
<section>
      <h2>Setting Up Replication (Again?)</h2>
         <h3>Use "df" or "du" to check for disk space!</h3>
</section>
<section>
      <h2>Setting Up Replication (Again?)</h2>
         <h3>DB-Master</h3>
<pre data-fragment-index="0" class="fragment"><code style="font-size:24px;">mkdir /home/rack/percbak</code></pre>
<pre data-fragment-index="0" class="fragment"><code style="font-size:24px;">innobackupex /home/rack/percbak</code></pre>
<pre data-fragment-index="1" class="fragment"><code style="font-size:24px;">.
.
.
innobackupex: completed OK!</code></pre>
<pre data-fragment-index="2" class="fragment"><code style="font-size:24px;">innobackupex --apply-log /home/rack/percbak/<TIMESTAMP></code></pre>
<pre data-fragment-index="3" class="fragment"><code style="font-size:24px;">.
.
.
innobackupex: completed OK!</code></pre>
<pre data-fragment-index="4" class="fragment"><code style="font-size:24px;">rsync -av --progress /home/rack/percbak 10.x.x.x:/home/rack</code></pre>
</section>
<section>
      <h2>Setting Up Replication (Again?)</h2>
         <h3>DB-Master</h3>
<pre data-fragment-index="0" class="fragment"><code style="font-size:24px;">mkdir /home/rack/percbak</code></pre>
<pre data-fragment-index="0" class="fragment"><code style="font-size:24px;">innobackupex /home/rack/percbak</code></pre>
<pre data-fragment-index="1" class="fragment"><code style="font-size:24px;">
.
.
.
innobackupex: completed OK!</code></pre>
</section>
<section>
      <h2>Setting Up Replication (Again?)</h2>
         <h3>DB-Slave</h3>
<pre data-fragment-index="1" class="fragment"><code style="font-size:24px;">
ls -al ~/.ssh
#
# If the directory doesn't exist, an easy way to create it with
# the correct permissions is to use "ssh-keygen".
# Paste the output of the DB-Master id_rsa.pub file in the
# "authorized_keys" file.
#
vi ~/.ssh/authorized_keys
chmod 600 ~/.ssh/authorized_keys
</code></pre>
</section>
   </section>


   <section data-background-image="https://s3.amazonaws.com/media-p.slid.es/uploads/mckraken/images/436688/bckgrnd.png" data-id="7df862e05ed906548cf8f2b68f88cbc6" class="">
      <h2>MySQL</h2>
         <h3  data-fragment-index="0" class="fragment">DB-Master</h3>
            <ul>
               <li></li>
            </ul>
         <h3  data-fragment-index="1" class="fragment">DB-Slave</h3>
   </section>


    </div>

    </div>
    <script src="lib/js/head.min.js"></script>
    <script src="js/reveal.min.js"></script>
 
    <script>
        // Required, even if empty.
        Reveal.initialize({
dependencies: [
					{ src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },
					{ src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
					{ src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },
					{ src: 'plugin/zoom-js/zoom.js', async: true, condition: function() { return !!document.body.classList; } },
					{ src: 'plugin/notes/notes.js', async: true, condition: function() { return !!document.body.classList; } }
				]
        });
    </script>
</body>
</html>
